package view.claire;

import model.claire.*;
import model.ismail.*;
import model.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.io.*;


import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.*;



public class MainView extends JFrame
{
	private class ContentPane2 extends JPanel
	{
		JPanel contents;
		public ContentPane2()
		{
			this.setLayout(new FlowLayout(FlowLayout.CENTER));
			contents = new JPanel();
		}
		@Override
		public void paintComponent(Graphics g)
		{
			Image img = Toolkit.getDefaultToolkit().getImage("rhing.jpg");
			super.paintComponent(g);
			g.drawImage(img, 0 ,0, null);
		}
		public void setPanel(JPanel p)
		{
			if (contents != null)
				contents.removeAll();
			contents.add(p);
		}
	}
	//private JPanel contents; 
	private ContentPane2 contents;
	private GameState gameState;
	
	public MainView(GameState state) 
	{
		
		this.gameState = state; 
		this.setSize(new Dimension(1060, 660));
		this.getContentPane().setBackground(Colors.red);
		
		
		//contents = new JPanel();
		contents = new ContentPane2();
		JPanel p = new StartMenuPanel();
		contents.setPanel(p);
		
		
		contents.setPreferredSize(new Dimension(400, 600));
		contents.setMinimumSize(new Dimension(400, 600));
		contents.add(Box.createRigidArea(new Dimension(400, 10)));
		contents.setBackground(Colors.red);
		//contents.add(new StartMenuPanel());
		//this.getContentPane().setLayout(new FlowLayout(FlowLayout.CENTER));
		this.getContentPane().add(contents);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setVisible(true);
	}
	
	public void loadMenu(String s)
	{
		/*
		this.remove(contents);
		contents = new JPanel();
		*/
		contents.setPreferredSize(new Dimension(400, 600));
		contents.setMinimumSize(new Dimension(400, 600));
		contents.add(Box.createRigidArea(new Dimension(400, 10)));
		contents.setBackground(Colors.red);
		if (s.equals("StartMenu"))
		{
			//this.contents.add(new StartMenuPanel());
			contents.setPanel(new StartMenuPanel());
		}
		if (s.equals("OptionsMenu"))
		{
			//this.contents.add(new OptionsMenuPanel(this));
			contents.setPanel(new OptionsMenuPanel(this));
		}
		if (s.equals("Options"))
		{
			contents.setPanel(new OptionsMenuPanel(this));
			//this.contents.add(new OptionsMenuPanel(this));
		}
		if (s.equals("Quit"))
		{
			System.exit(0);
		}
		if (s.equals("LoadGameMenu"))
		{
			
		}
		if (s.equals("SaveGameMenu"))
		{
			
		}
		if (s.equals("GameBoardGUI"))
		{
			
		}
		//this.add(contents);
		this.validate();
		this.repaint();
	}
	
	public GameState getGameState()
	{
		return this.gameState;
	}
	
	public static void main(String [] args) throws IOException
	{
		new MainView(new GameState(new GameBoard()));
	}
	

}